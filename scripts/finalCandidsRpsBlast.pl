# Developed by Carlos Fischer - 20 Oct 2020

# To generate the final candidates for RPS-Blast, for all superfamilies

####
# Usage: perl finalCandidsRpsBlast.pl
# It would be launched by CombTEs.pl
####


# The input file can be generated by the "extractRPSB.pl" script, which extracts and formats the predictions from the output file of RPS-Blast. Such a script names its output file as "ConservedDomains_NoRedund.pred"; this is the name used here in "finalCandidsRpsBlast.pl".
# In such a file, the predictions of RPS-Blast must be in this format (all together):
# DOMAIN--dom_ID_in_CDD---FROM--ff---TO--tt---LENGTH--ll---EVALUE--ev---SCORE--sc---SENSE--Direct/Reverse
# "ff", "tt", and "ll" are integer.

# There is NO limit for the lengths of the RPS-Blast's predictions.


# This script uses 4 parameters:
# - 2 of them can be changed in "ParamsGeneral.pm":
#	- @superfamilies: the used superfamilies;
#	- %filterOtherTools: values of the filter(s) of OTHER tool(s) considered in the analyses. 
# - 2 others can be changed in "ParamsRpsblast.pm":
#	- $distPredsRPSB: maximum distance between 2 predictions to consider them inside the SAME candidate (default = 300);
#	- %domains: conserved domains considered in the analyses (after running RPS-Blast), for:
#		- Bel:   DUF1759, Peptidase_A17, DUF1758, RT_pepA17;
#		- Copia: Retrotran_gag, gag_pre-integrs, RVT_2, RNase_HI_RT_Ty1;
#		- Gypsy: Retrotrans_gag, gag-asp_proteas, retropepsin_like, RP_Saci_like, RVP_2, RT_LTR, RVT_3, RNase_HI_RT_Ty3, 			  RNase_HI_like;
#		- and:   rve (Integrase), for Bel, Copia, and Gypsy.

###########################################################################################

use strict;
use warnings;

use Cwd qw(getcwd);
use lib getcwd(); 

use ParamsGeneral qw(@superfamilies %filterOtherTools);
use ParamsRpsblast qw(%domains $distPredsRPSB);

my $filterRpsBlast = $filterOtherTools{'RpsBlast'};
# DO NOT CHANGE the value of "$filterRpsBlast" directly here; change it in "%filterOtherTools" in "ParamsGeneral.pm" package.

###########################################################################################


my $fileConsDoms = "ConservedDomains_NoRedund.pred"; # RPS-Blast predictions
open (PREDFILE, $fileConsDoms) or die "\nCan't open $fileConsDoms!!!\n\n";
my @domainsRpsb = <PREDFILE>;
close (PREDFILE);

my $qttDoms = scalar(@domainsRpsb);

my $finalCandids = "finalCandidates_RpsBlast.txt";
open (CANDIDS, ">$finalCandids") or die "Can't open $finalCandids";
print CANDIDS "Final candidates of RPS-Blast, with the domain predictions used to generate each final candidate.\n";
print CANDIDS "Maximum distance between two predictions to consider them inside the same candidate: $distPredsRPSB.\n";
print CANDIDS "Filter for e-values: $filterRpsBlast.\n\n";

my $newCandid = "yes";
my $numCandid = 0;
my $i = 0;
my ($superfam, $startCandid, $endCandid, $senseCandid, $spfamCandid, @arrayToPrint);
while ($i < $qttDoms) {
	my $line = $domainsRpsb[$i]; chomp $line;
#	DOMAIN--dom---FROM--ff---TO--tt---LENGTH--ll---EVALUE--eval---SCORE--sc---SENSE--D/R
	if ($line =~ /DOMAIN--(.*)---FROM--(\d+)---TO--(\d+)---LENGTH--.*---EVALUE--(.*)---SCORE--.*---SENSE--(.*)/) {
		my $dom    = $1;
		my $from   = $2;
		my $to     = $3;
		my $evalue = $4;
		my $sense  = $5;

		if ($evalue <= $filterRpsBlast) {
			if ($dom eq "rve") { $superfam = "inconclusive"; } # it may be a prediction from several superfamilies
			else {
				foreach my $spfam (@superfamilies) {
					if ($dom =~ $domains{$spfam}) { $superfam = $spfam; }
				}
			}

			if ($newCandid eq "yes") {
				$startCandid = $from;
				$endCandid   = $to;
				$senseCandid = $sense;
				$spfamCandid = $superfam;
				@arrayToPrint = ();
				push (@arrayToPrint, $line);
				$newCandid = "no";
				$i++;
			}
			else { # ($newCandid eq "NO")
				if ( ($sense eq $senseCandid) and ( ($superfam eq $spfamCandid) or ($superfam eq "inconclusive") or ($spfamCandid eq "inconclusive") ) and (($from - $endCandid) <= $distPredsRPSB) ) {
			 # a new candidate when: "different sense", "different superfams", or "dist(from-endCandid) > $distPredsRPSB".
					if ($spfamCandid eq "inconclusive") { $spfamCandid = $superfam; }
					if ($to > $endCandid) { $endCandid = $to; }
					push (@arrayToPrint, $line);
					$i++;
				}
				else { $newCandid = "yes"; } # found a new candidate: write the current one.
			} # ELSE { # $newCandid eq "NO"
		} # IF ($evalue <= $filterRpsBlast)
		else { $i++; }

		if ( ($newCandid eq "yes") or ($i == $qttDoms) ) {
			my $qttToPrint = scalar(@arrayToPrint);
			if ($qttToPrint != 0) {
				$numCandid++;
				my $lengthCandid = $endCandid - $startCandid + 1;
				my $idCandid = "CANDIDATE_$numCandid - FROM: $startCandid - TO: $endCandid - LENGTH: $lengthCandid - SENSE: $senseCandid - CLASSIFICATION: $spfamCandid";
				print CANDIDS "$idCandid\n";
				print "$idCandid\n";

				for (my $j = 0; $j < $qttToPrint; $j++) {
					print CANDIDS "$arrayToPrint[$j]\n";
					print "$arrayToPrint[$j]\n";
				}
				print CANDIDS "\n";
				print "###\n";
			} # IF ($qttToPrint != 0)
		} # IF ( ($newCandid eq "yes") or ($i == $qttDoms) )

	} # IF ($line =~ /DOMAIN--(.*)---FROM-- ...
	else { $i++; }

} # WHILE ($i < $qttDoms)

close (CANDIDS);

